import chainlit as cl
from agent import AdvancedWebAgent
import json
import re
import os
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory

# (import sync functions ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö action callbacks)
from agent import sync_list_all_memories, sync_list_workspace_files


@cl.on_chat_start
async def start():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
    """
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent instance (‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå)
    agent_instance = AdvancedWebAgent()

    # --- üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á Agent ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà! ---
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ú‡∏π‡∏Å AgentExecutor ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á Chainlit
    agent_with_memory = RunnableWithMessageHistory(
        agent_instance.agent_executor,
        # ‡πÉ‡∏ä‡πâ cl.user_session.get("chat_history") ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Chainlit ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ memory ‡πÉ‡∏´‡πâ
        lambda session_id: cl.user_session.get("chat_history"),
        input_messages_key="input",
        history_messages_key="chat_history",
    )

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó (‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤) ‡πÅ‡∏•‡∏∞ "Agent ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥" ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session
    cl.user_session.set("chat_history", ChatMessageHistory())
    cl.user_session.set("agent_with_memory", agent_with_memory)

    # --- üí° ‡∏¢‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---

    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å" ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏≤‡∏ß‡∏£‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
    actions = [
        cl.Action(name="view_memories", payload={}, label="üß† ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥"),
        cl.Action(name="explore_workspace", payload={}, label="üìÇ ‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"),
        cl.Action(name="help", payload={}, label="‚ùì ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    ]
    cl.user_session.set("main_actions", actions) # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á

    # 2. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏≤
    await cl.Message(
        content="""**‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏° Cipher V3**

‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!

‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üöÄ""",
        actions=actions # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏î‡πâ‡∏ß‡∏¢
    ).send()


# --- Action Callbacks ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Help Command ---
@cl.action_callback("view_memories")
async def on_action_view_memories(action: cl.Action):
    await cl.Message(content="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...").send()
    
    response_str = sync_list_all_memories()
    response_data = json.loads(response_str)

    if "error" in response_data:
        await cl.ErrorMessage(content=f"Error: {response_data['error']}").send()
        return

    memories = response_data.get("memories", [])
    if not memories:
        await cl.Message(content="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÉ‡∏î‡πÜ ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏±‡∏ö").send()
        return

    formatted_text = "### üß† All Saved Memories\n\n"
    for mem in memories:
        formatted_text += f"**ID:** `{mem['id']}`\n"
        formatted_text += f"**Content:**\n```\n{mem['content']}\n```\n"
        formatted_text += f"**Metadata:** `{json.dumps(mem['metadata'])}`\n---\n"

    await cl.Message(content=formatted_text).send()


@cl.action_callback("explore_workspace")
async def on_action_explore_workspace(action: cl.Action):
    await cl.Message(content="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...").send()
    
    response_str = sync_list_workspace_files()
    response_data = json.loads(response_str)

    if "error" in response_data:
        await cl.ErrorMessage(content=f"Error: {response_data['error']}").send()
        return

    files = response_data.get("files", [])
    if not files:
        await cl.Message(content="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `workspace` ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö").send()
        return

    table_header = "| Filename | Size (KB) | Last Modified |\n|---|---|---|\n"
    table_rows = [
        f"| `{f['filename']}` | {f['size_kb']} | {f['last_modified']} |"
        for f in files
    ]

    formatted_text = "### üìÇ Files in Workspace\n\n" + table_header + "\n".join(table_rows)
    formatted_text += "\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `read_from_file('filename')` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"

    await cl.Message(content=formatted_text).send()


@cl.action_callback("help")
async def on_action_help(action: cl.Action):
    main_actions = cl.user_session.get("main_actions")
    await cl.Message(
        content="""## ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ú‡∏° (Cipher V3)
‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö:
*   **üîé ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢:** ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤, ‡∏≠‡πà‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
*   **üß† ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥:** ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏î‡∏à‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
*   **‚úçÔ∏è ‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡∏≠‡πà‡∏≤‡∏ô:** ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå `.txt`, `.pdf`, ‡πÅ‡∏•‡∏∞ `.docx`
*   **üî¢ ‡∏ô‡∏±‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:** ‡πÅ‡∏Å‡πâ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
*   **üó£Ô∏è ‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£:** ‡∏´‡∏≤‡∏Å‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏ú‡∏°‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
""",
        actions=main_actions # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Help
    ).send()


@cl.on_message
async def main(message: cl.Message):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    """
    # --- üí° ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ô Agent ---
    agent_with_memory = cl.user_session.get("agent_with_memory")
    session_id = str(cl.user_session.get("id")) # ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à
    main_actions = cl.user_session.get("main_actions") # ‡∏î‡∏∂‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

    callbacks = [cl.LangchainCallbackHandler(stream_final_answer=False)]

    async with cl.Step(name="Cipher's Thought Process", type="chain"):
        response = await agent_with_memory.ainvoke(
            {"input": message.content},
            config={"callbacks": callbacks, "configurable": {"session_id": session_id}}
        )

    final_answer = response.get("output", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡∏ú‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

    # --- üí° ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ history ‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏õ! ---
    # RunnableWithMessageHistory ‡∏à‡∏∞‡∏ó‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

    # --- üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á Elements ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
    elements = []

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á Agent
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå `NVDA_stock_prices.csv` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    filenames = re.findall(r"`(.*?\.(?:csv|txt|md|json|png|jpg|pdf|docx))`", final_answer)

    for filename in filenames:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô workspace
        file_path = os.path.join("workspace", filename)

        if os.path.exists(file_path):
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á File Element ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            elements.append(cl.File(
                name=filename,
                path=file_path,
                display="inline" # "inline" ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó, "side" ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
            ))

    await cl.Message(
        content=final_answer,
        actions=main_actions,
        elements=elements # <--- üí° ‡πÅ‡∏ô‡∏ö Elements ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    ).send()