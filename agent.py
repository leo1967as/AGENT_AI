import os
import json
import asyncio
from typing import Type, Optional, Union
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.agents import create_react_agent, AgentExecutor, create_openai_tools_agent
from langchain.tools import tool
from langchain.prompts import PromptTemplate
from langchain_core.prompts import ChatPromptTemplate
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from contextlib import asynccontextmanager
import chainlit as cl
from pydantic import BaseModel, Field
from langchain_core.tools import BaseTool
from langchain_tavily import TavilySearch

# yfinance р╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Йр╣Гр╕Щр╣Др╕Яр╕ер╣Мр╕Щр╕╡р╣Йр╣Бр╕ер╣Йр╕з р╣Ар╕Юр╕гр╕▓р╕░р╣Ар╕гр╕▓р╕Ир╕░р╣Ар╕гр╕╡р╕вр╕Бр╕Ьр╣Ир╕▓р╕Щ server р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
# import yfinance as yf
import pandas as pd

load_dotenv()

MODEL = os.getenv("OPENROUTER_MODEL", "openai/gpt-4o-mini")
OPENAI_API_KEY = os.getenv("OPENROUTER_API_KEY")
SERVER_COMMAND = "python"
SERVER_ARGS = ["server.py"]

@asynccontextmanager
async def _setup_mcp():
    server_params = StdioServerParameters(command=SERVER_COMMAND, args=SERVER_ARGS, env={"PYTHONUTF8": "1"})
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            yield session

# --- ЁЯТб р╣Вр╕Др╣Йр╕Фр╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Др╕Вр╣Бр╕ер╣Йр╕з ---

def _run_async_tool(tool_name: str, arguments: dict) -> str:
    """Helper function to run an async MCP tool synchronously."""
    async def _async_call():
        async with _setup_mcp() as session:
            result = await session.call_tool(tool_name, arguments=arguments)
            return result.content[0].text if result.content else '{"error": "No content returned from tool"}'

    try:
        # р╣Гр╕Кр╣Й asyncio.run() р╕Лр╕╢р╣Ир╕Зр╕Ир╕▒р╕Фр╕Бр╕▓р╕г loop р╣Гр╕лр╣Йр╣Ар╕нр╕З
        return asyncio.run(_async_call())
    except Exception as e:
        return json.dumps({"error": f"Failed to run async tool {tool_name}: {e}"})

# Sync wrappers р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й MCP Server р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
# --- ЁЯТб р╣Вр╕Др╣Йр╕Фр╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Др╕Вр╣Бр╕ер╣Йр╕з ---
def sync_get_stock_price(tickers: list[str]) -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool get_stock_price р╕Чр╕╡р╣Ир╕гр╕нр╕Зр╕гр╕▒р╕Ър╕лр╕ер╕▓р╕в tickers."""
    return _run_async_tool("get_stock_price", {"tickers": tickers})

# --- ЁЯТб 1. р╣Ар╕Юр╕┤р╣Ир╕б wrapper functions р╕кр╕│р╕лр╕гр╕▒р╕Ъ file tools ---
def sync_get_current_date() -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool get_current_date р╕Ър╕Щ MCP server."""
    return _run_async_tool("get_current_date", {})

def sync_write_to_file(filename: str, content: str) -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool write_to_file р╕Ър╕Щ MCP server."""
    return _run_async_tool("write_to_file", {"filename": filename, "content": content})

def sync_read_from_file(filename: str) -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool read_from_file р╕Ър╕Щ MCP server."""
    return _run_async_tool("read_from_file", {"filename": filename})

def sync_calculator(expression: str) -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool calculator р╕Ър╕Щ MCP server."""
    return _run_async_tool("calculator", {"expression": expression})

# р╣Ар╕Юр╕┤р╣Ир╕б wrapper functions р╕кр╕│р╕лр╕гр╕▒р╕Ъ memory tools
def sync_save_memory_chunk(content: str, metadata: dict = None) -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool save_memory_chunk р╕Ър╕Щ MCP server."""
    args = {"content": content}
    if metadata is not None:
        args["metadata"] = metadata
    return _run_async_tool("save_memory_chunk", args)

def sync_search_relevant_memories(query: str) -> str:
    """Wrapper р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕гр╕╡р╕вр╕Б tool search_relevant_memories р╕Ър╕Щ MCP server."""
    return _run_async_tool("search_relevant_memories", {"query": query})

# --- ЁЯТб 1. р╣Ар╕Юр╕┤р╣Ир╕б wrapper functions р╕кр╕│р╕лр╕гр╕▒р╕Ъ command center tools ---
def sync_list_all_memories() -> str:
    return _run_async_tool("list_all_memories", {})

def sync_list_workspace_files() -> str:
    return _run_async_tool("list_workspace_files", {})

# ------------------- ROBUST TAVILY TOOL (THE FIX) -------------------

class TavilyInput(BaseModel):
    """Input schema for the Tavily search tool."""
    query: str = Field(description="The search query.")
    include_domains: Optional[Union[str, list[str]]] = Field(description="A list of domains to specifically search within.")

class RobustTavilySearchTool(BaseTool):
    """
    A wrapper for TavilySearch that is more forgiving with its input types.
    It automatically converts a string `include_domains` to a list.
    """
    name: str = "tavily_search_results_json"
    description: str = (
        "A search engine optimized for comprehensive, accurate, and trusted results. "
        "Useful for when you need to answer questions about real-world events or find up-to-date information."
    )
    args_schema: Type[BaseModel] = TavilyInput

    def _run(self, query: str, include_domains: Optional[Union[str, list[str]]] = None) -> str:
        """Use the tool."""
        # р╕кр╕гр╣Йр╕▓р╕З instance р╕Вр╕нр╕З tool р╕Ир╕гр╕┤р╕З
        tavily_tool = TavilySearch(max_results=5)
        
        # --- ЁЯТб р╕Щр╕╡р╣Ир╕Др╕╖р╕н "р╣Ар╕Бр╕гр╕▓р╕░р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ" р╕Вр╕нр╕Зр╣Ар╕гр╕▓ ---
        final_domains = include_domains
        if isinstance(final_domains, str) and final_domains:
            final_domains = [final_domains]
        
        # р╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й tool р╕Ир╕гр╕┤р╕Зр╕Фр╣Йр╕зр╕в argument р╕Чр╕╡р╣Ир╣Бр╕Бр╣Йр╣Др╕Вр╣Бр╕ер╣Йр╕з
        return tavily_tool.invoke({"query": query, "include_domains": final_domains})

    async def _arun(self, query: str, include_domains: Optional[Union[str, list[str]]] = None) -> str:
        """Use the tool asynchronously."""
        # р╕кр╕гр╣Йр╕▓р╕З instance р╕Вр╕нр╕З tool р╕Ир╕гр╕┤р╕З
        tavily_tool = TavilySearch(max_results=5)

        # --- ЁЯТб "р╣Ар╕Бр╕гр╕▓р╕░р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ" р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕лр╕бр╕Ф async ---
        final_domains = include_domains
        if isinstance(final_domains, str) and final_domains:
            final_domains = [final_domains]
            
        return await tavily_tool.ainvoke({"query": query, "include_domains": final_domains})

# ------------------- EXISTING TOOLS -------------------

# LangChain Tools (clean description)
@tool
def get_stock_price(tickers: list[str]) -> str:
    """
    р╣Гр╕Кр╣Йр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕╕р╣Йр╕Щр╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З 10 р╕зр╕▒р╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Фр╕кр╕│р╕лр╕гр╕▒р╕Ъ Ticker "р╕лр╕ер╕▓р╕вр╕Хр╕▒р╕з" р╕Юр╕гр╣Йр╕нр╕бр╕Бр╕▒р╕Щр╣Гр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з
    р╣Ар╕Кр╣Ир╕Щ ["NVDA", "GOOGL"]
    """
    return sync_get_stock_price(tickers)

# --- ЁЯТб 2. р╣Ар╕Юр╕┤р╣Ир╕б LangChain tool definitions р╕кр╕│р╕лр╕гр╕▒р╕Ъ file tools ---
@tool
def get_current_date() -> str:
    """
    р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Щр╕╡р╣Йр╣Ар╕бр╕╖р╣Ир╕нр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Чр╕гр╕▓р╕Ър╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕лр╕гр╕╖р╕нр╣Ар╕зр╕ер╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
    """
    return sync_get_current_date()

@tool
def write_to_file(filename: str, content: str) -> str:
    """
    р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Щр╕╡р╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Вр╕╡р╕вр╕Щр╕лр╕гр╕╖р╕нр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б (content) р╕ер╕Зр╣Гр╕Щр╣Др╕Яр╕ер╣М (filename)
    р╕бр╕╡р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣Мр╕бр╕▓р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕кр╕гр╕╕р╕Ы, р╕гр╣Ир╕▓р╕Зр╕нр╕╡р╣Ар╕бр╕е, р╕лр╕гр╕╖р╕нр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ
    """
    return sync_write_to_file(filename, content)

@tool
def read_from_file(filename: str) -> str:
    """
    р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Щр╕╡р╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕нр╣Ир╕▓р╕Щр╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М (filename) р╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣И
    р╕бр╕╡р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣Мр╣Ар╕бр╕╖р╣Ир╕нр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣Мр╣Ар╕Юр╕╖р╣Ир╕нр╕Щр╕│р╕бр╕▓р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕лр╕гр╕╖р╕нр╕Чр╕│р╕Зр╕▓р╕Щр╕Хр╣Ир╕н
    """
    return sync_read_from_file(filename)

@tool
def calculator(expression: str) -> str:
    """
    р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Щр╕╡р╣Йр╣Ар╕бр╕╖р╣Ир╕нр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕Ур╕Чр╕▓р╕Зр╕Др╕Ур╕┤р╕Хр╕ир╕▓р╕кр╕Хр╕гр╣Мр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ
    р╣Ар╕Кр╣Ир╕Щ '2 * (3 + 4)', '(8000 + 36500)', etc.
    """
    return sync_calculator(expression)

# р╣Ар╕Юр╕┤р╣Ир╕б tool definitions р╕кр╕│р╕лр╕гр╕▒р╕Ъ memory tools
@tool
def save_memory_chunk(content: str, metadata: dict = None) -> str:
    """
    р╣Гр╕Кр╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕Др╕▒р╕Н, р╕Вр╣Йр╕нр╣Ар╕Чр╣Зр╕Ир╕Ир╕гр╕┤р╕З, р╕лр╕гр╕╖р╕нр╕Ър╕Чр╕кр╕гр╕╕р╕Ыр╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕ер╕Зр╣Гр╕Щр╕Др╕зр╕▓р╕бр╕Ир╕│р╕гр╕░р╕вр╕░р╕вр╕▓р╕з
    metadata р╣Ар╕Ыр╣Зр╕Щ dict р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ър╕▒р╕Зр╕Др╕▒р╕Ъ р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕кр╕гр╕┤р╕б р╣Ар╕Кр╣Ир╕Щ {"source": "URL"}
    """
    return sync_save_memory_chunk(content, metadata)

@tool
def search_relevant_memories(query: str) -> str:
    """
    р╕Др╣Йр╕Щр╕лр╕▓р╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕лр╕гр╕╖р╕нр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╕Цр╕▓р╕зр╕гр╣Ар╕Юр╕╖р╣Ир╕нр╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╕Ыр╕▒р╕Нр╕лр╕▓
    """
    return sync_search_relevant_memories(query)

# --- ЁЯТб 2. р╣Ар╕Юр╕┤р╣Ир╕б LangChain tool definitions ---
@tool
def list_all_memories() -> str:
    """р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Др╕зр╕▓р╕бр╕Чр╕гр╕Зр╕Ир╕│р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Чр╕╡р╣Ир╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕зр╣Й"""
    return sync_list_all_memories()

@tool
def list_workspace_files() -> str:
    """р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Др╕Яр╕ер╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щр╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕Чр╕│р╕Зр╕▓р╕Щ (workspace)"""
    return sync_list_workspace_files()

# --- ЁЯТб р╣Ар╕Юр╕┤р╣Ир╕б Tool р╣Гр╕лр╕бр╣Ир╕кр╕│р╕лр╕гр╕▒р╕Ъ Human-in-the-Loop ---
@tool
async def ask_user(question: str) -> str:
    """
    р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Щр╕╡р╣Й "р╣Ар╕бр╕╖р╣Ир╕нр╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╣Ар╕Чр╣Ир╕▓р╕Щр╕▒р╣Йр╕Щ" р╣Ар╕Юр╕╖р╣Ир╕нр╕Цр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕бр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕вр╕▒р╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
    р╕бр╕╡р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣Мр╕бр╕▓р╕Бр╣Ар╕бр╕╖р╣Ир╕нр╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б, р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Др╕│р╕Кр╕╡р╣Йр╣Бр╕Щр╕░, р╕лр╕гр╕╖р╕нр╣Др╕бр╣Ир╣Бр╕Щр╣Ир╣Гр╕Ир╕зр╣Ир╕▓р╕Ир╕░р╕Чр╕│р╕нр╕░р╣Др╕гр╕Хр╣Ир╕н
    р╕лр╣Йр╕▓р╕бр╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Щр╕╡р╣Йр╣Ар╕Юр╕╖р╣Ир╕нр╕Цр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕лр╕гр╕╖р╕нр╕Цр╕▓р╕бр╣Ар╕Юр╕╖р╣Ир╕нр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕гр╕╣р╣Йр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з
    """
    # р╣Гр╕Кр╣Й cl.AskUserMessage р╕Вр╕нр╕З Chainlit р╣Ар╕Юр╕╖р╣Ир╕нр╣Бр╕кр╕Фр╕Зр╕Бр╕ер╣Ир╕нр╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕гр╕н input
    response = await cl.AskUserMessage(content=question, timeout=120).send()
    if response:
        return f"User responded: {response['output']}"
    else:
        return "The user did not respond in time."

class AdvancedWebAgent:
    def __init__(self):
        self.llm = ChatOpenAI(model=MODEL, api_key=OPENAI_API_KEY, base_url="https://openrouter.ai/api/v1")
        # --- ЁЯТб 3. р╣Ар╕Юр╕┤р╣Ир╕б tool р╣Гр╕лр╕бр╣Ир╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щр╕ер╕┤р╕кр╕Хр╣Мр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Вр╕нр╕З Agent ---
        self.tools = [RobustTavilySearchTool(), get_stock_price, get_current_date, write_to_file, read_from_file, ask_user, calculator, save_memory_chunk, search_relevant_memories, list_all_memories, list_workspace_files]

        # --- ЁЯТб р╕нр╕▒р╕Ыр╣Ар╕Бр╕гр╕Ф "р╕кр╕бр╕нр╕З" р╣Бр╕ер╕░ "р╕Ър╕╕р╕Др╕ер╕┤р╕Б" р╕Вр╕нр╕З Agent ---
        self.prompt = ChatPromptTemplate.from_messages([
            ("system", """р╕Др╕╕р╕Ур╕Др╕╖р╕н "Cipher V3 - The Archivist" р╕кр╕╕р╕Фр╕вр╕нр╕Ф AI Assistant р╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╡р╣Ир╕вр╕зр╕Кр╕▓р╕Н, р╕гр╕нр╕Ър╕Др╕нр╕Ъ, р╣Бр╕ер╕░р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Бр╕Бр╣Йр╕Ыр╕▒р╕Нр╕лр╕▓р╣Ар╕Йр╕Юр╕▓р╕░р╕лр╕Щр╣Йр╕▓р╣Др╕Фр╣Й р╕Юр╕гр╣Йр╕нр╕бр╕Фр╣Йр╕зр╕вр╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╕Цр╕▓р╕зр╕гр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Бр╣Зр╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕кр╕│р╕Др╕▒р╕Н

            **р╕Ър╕╕р╕Др╕ер╕┤р╕Бр╣Бр╕ер╕░р╕кр╣Др╕Хр╕ер╣Мр╕Бр╕▓р╕гр╕Хр╕нр╕Ъ:**
            - р╕кр╕╖р╣Ир╕нр╕кр╕▓р╕гр╕нр╕вр╣Ир╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Бр╕ер╕░р╣Ар╕Ыр╣Зр╕Щр╕бр╕┤р╕Хр╕гр╣Ар╕кр╕бр╕н
            - р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Др╕│р╕Хр╕нр╕Ър╕Фр╣Йр╕зр╕в Markdown р╕Чр╕╕р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╕нр╣Ир╕▓р╕Щр╕Зр╣Ир╕▓р╕в

            **р╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╕Др╕┤р╕Фр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ (Workflow р╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф):**
            р╣Ар╕бр╕╖р╣Ир╕нр╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Др╕│р╕Цр╕▓р╕б р╣Гр╕лр╣Йр╕Др╕╕р╕Ур╕Чр╕│р╕Хр╕▓р╕бр╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕г "Search Memory First - Plan-Execute-Critique-Refine - Save Memory Last" р╕Щр╕╡р╣Йр╣Ар╕кр╕бр╕н:
            1.  **Search Memory First:** р╕Бр╣Ир╕нр╕Щр╕Ир╕░р╣Ар╕гр╕┤р╣Ир╕бр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╣Гр╕Фр╣Ж р╣Гр╕лр╣Йр╕Др╣Йр╕Щр╕лр╕▓р╣Гр╕Щр╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╕Цр╕▓р╕зр╕г (search_relevant_memories) р╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕зр╣Ир╕▓р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕гр╕╖р╕нр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ър╕Др╕│р╕Цр╕▓р╕бр╕лр╕гр╕╖р╕нр╣Др╕бр╣И р╕лр╕▓р╕Бр╕бр╕╡р╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▒р╣Йр╕Щр╕бр╕▓р╣Ар╕Ыр╣Зр╕Щр╕Рр╕▓р╕Щр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Хр╣Ир╕н
            2.  **Plan:** р╕зр╕▓р╕Зр╣Бр╕Ьр╕Щр╕зр╣Ир╕▓р╕Ир╕░р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕нр╕░р╣Др╕гр╣Ар╕Юр╕╖р╣Ир╕нр╕Ър╕гр╕гр╕ер╕╕р╣Ар╕Ыр╣Йр╕▓р╕лр╕бр╕▓р╕вр╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕нр╕нр╕вр╕╣р╣И
            3.  **Execute:** р╕ер╕Зр╕бр╕╖р╕нр╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Хр╕▓р╕бр╣Бр╕Ьр╕Щ
            4.  **Critique (р╕зр╕┤р╕Ир╕▓р╕гр╕Ур╣М):** **р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Нр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф!** р╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╣Др╕Фр╣Йр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М (Observation) р╕Бр╕ер╕▒р╕Ър╕бр╕▓ р╣Гр╕лр╣Йр╕лр╕вр╕╕р╕Фр╣Бр╕ер╕░р╕Цр╕▓р╕бр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕зр╣Ир╕▓:
                - "р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Щр╕╡р╣Йр╕кр╕│р╣Ар╕гр╣Зр╕Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И? р╕бр╕╡ Error р╕лр╕гр╕╖р╕нр╣Др╕бр╣И?"
                - "р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕бр╕▓р╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕нр╕Чр╕╡р╣Ир╕Ир╕░р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╕лр╕гр╕╖р╕нр╕вр╕▒р╕З?"
                - "р╕Цр╣Йр╕▓р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з р╕бр╕▒р╕Щр╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╣Ар╕Юр╕гр╕▓р╕░р╕нр╕░р╣Др╕г? (р╣Ар╕Кр╣Ир╕Щ API р╕Юр╕▒р╕З, р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е, р╕Кр╕╖р╣Ир╕нр╕Ьр╕┤р╕Ф)"
                - "р╕бр╕╡ 'р╣Бр╕Ьр╕Щр╕кр╕│р╕гр╕нр╕З' р╕лр╕гр╕╖р╕н 'р╕Чр╕▓р╕Зр╕нр╣Йр╕нр╕б' р╕Чр╕╡р╣Ир╕Фр╕╡р╕Бр╕зр╣Ир╕▓р╕Щр╕╡р╣Йр╣Др╕лр╕б?"
            5.  **Refine (р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З):**
                - **р╕Цр╣Йр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕ер╕░р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕н:** р╣Др╕Ыр╕Чр╕╡р╣Ир╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕З Final Answer р╣Бр╕ер╕░ Save Memory Last
                - **р╕Цр╣Йр╕▓р╕ер╣Йр╕бр╣Ар╕лр╕ер╕зр╕лр╕гр╕╖р╕нр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╕Юр╕н:** **р╕нр╕вр╣Ир╕▓р╣Ар╕Юр╕┤р╣Ир╕Зр╕вр╕нр╕бр╣Бр╕Юр╣Й!** р╣Гр╕лр╣Йр╕кр╕гр╣Йр╕▓р╕З "р╣Бр╕Ьр╕Щр╣Гр╕лр╕бр╣И" р╕Чр╕╡р╣Ир╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Бр╕ер╣Йр╕зр╣Вр╕Фр╕вр╕нр╕┤р╕Зр╕Ир╕▓р╕Бр╕Ьр╕ер╕Бр╕▓р╕гр╕зр╕┤р╕Ир╕▓р╕гр╕Ур╣М (р╣Ар╕Кр╣Ир╕Щ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Др╕Ыр╣Гр╕Кр╣Й `web_search` р╣Бр╕Чр╕Щ, р╕ер╕нр╕Зр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Др╕│р╕Др╣Йр╕Щр╕лр╕▓, р╕лр╕гр╕╖р╕нр╣Гр╕Кр╣Й `ask_user` р╣Ар╕Юр╕╖р╣Ир╕нр╕Цр╕▓р╕бр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й) р╣Бр╕ер╣Йр╕зр╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕Чр╕│р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щ Execute р╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З
            6.  **Save Memory Last:** р╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╣Др╕Фр╣Йр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕вр╕лр╕гр╕╖р╕нр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕кр╕┤р╣Ир╕Зр╣Гр╕лр╕бр╣И р╣Гр╕лр╣Йр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕Др╕▒р╕Нр╕лр╕гр╕╖р╕нр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Гр╕лр╕бр╣Ир╕ер╕Зр╣Гр╕Щр╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╕Цр╕▓р╕зр╕г (save_memory_chunk) р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕Кр╣Йр╣Гр╕Щр╕нр╕Щр╕▓р╕Др╕Х

            **р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╕Ыр╕▒р╕Нр╕лр╕▓:**
            - р╕Цр╣Йр╕▓ `get_stock_price` р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з р╣Гр╕лр╣Йр╕зр╕┤р╕Ир╕▓р╕гр╕Ур╣Мр╕зр╣Ир╕▓ "Tool р╕нр╕▓р╕Ир╕Ир╕░р╕Юр╕▒р╕З р╕лр╕гр╕╖р╕н Ticker р╕Ьр╕┤р╕Ф" р╣Бр╕ер╕░р╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Ьр╕Щр╣Гр╕лр╕бр╣И "р╕ер╕нр╕Зр╣Гр╕Кр╣Й `web_search` р╣Ар╕Юр╕╖р╣Ир╕нр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕▓р╕Др╕▓р╕лр╕╕р╣Йр╕Щр╕Ир╕▓р╕Бр╣Ар╕зр╣Зр╕Ър╣Бр╕Чр╕Щ"
            - р╕Цр╣Йр╕▓ `browse_url` р╣Бр╕ер╣Йр╕зр╣Др╕Фр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Ыр╕гр╕░р╣Ар╕Фр╣Зр╕Щ р╣Гр╕лр╣Йр╕зр╕┤р╕Ир╕▓р╕гр╕Ур╣Мр╕зр╣Ир╕▓ "URL р╕Щр╕╡р╣Йр╕нр╕▓р╕Ир╕Ир╕░р╣Др╕бр╣Ир╕Фр╕╡" р╣Бр╕ер╕░р╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Ьр╕Щр╣Гр╕лр╕бр╣И "р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕Фр╕╣р╕Ьр╕ер╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╣Ар╕Фр╕┤р╕бр╣Бр╕ер╣Йр╕зр╣Ар╕ер╕╖р╕нр╕Б `browse_url` р╕Бр╕▒р╕Ъ URL р╕нр╕╖р╣Ир╕Щ"

            **Workflow р╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░:**
            - **р╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Бр╕▒р╕Ър╕лр╕ер╕▓р╕вр╕гр╕▓р╕вр╕Бр╕▓р╕г:** р╣Ар╕бр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Вр╕нр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕лр╕ер╕▓р╕вр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Юр╕гр╣Йр╕нр╕бр╕Бр╕▒р╕Щ (р╣Ар╕Кр╣Ир╕Щ р╕лр╕╕р╣Йр╕Щр╕лр╕ер╕▓р╕вр╕Хр╕▒р╕з, р╣Др╕Яр╕ер╣Мр╕лр╕ер╕▓р╕вр╣Др╕Яр╕ер╣М) **р╣Гр╕лр╣Йр╕Др╕╕р╕Ур╕гр╕зр╕Ър╕гр╕зр╕бр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Бр╕ер╣Йр╕зр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╣Ар╕Юр╕╡р╕вр╕З "р╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з"** р╣Вр╕Фр╕вр╕кр╣Ир╕Зр╣Ар╕Ыр╣Зр╕Щр╕ер╕┤р╕кр╕Хр╣М (list) р╣Ар╕Юр╕╖р╣Ир╕нр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕кр╕╣р╕Зр╕кр╕╕р╕Ф

            **р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Юр╕┤р╣Ар╕ир╕й:**
            - **р╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╣Ар╕зр╣Зр╕Ъ:** р╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕н `tavily_search_results_json` р╣Ар╕Ыр╣Зр╕Щр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕нр╕лр╕ер╕▒р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╣Ар╕зр╣Зр╕Ъ
            - **р╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕У:** р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕Ир╕Чр╕вр╣Мр╕Др╕Ур╕┤р╕Хр╕ир╕▓р╕кр╕Хр╕гр╣Мр╕лр╕гр╕╖р╕нр╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕Ур╣Гр╕Фр╣Ж **р╣Гр╕лр╣Йр╣Гр╕Кр╣Йр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕бр╕╖р╕н `calculator` р╣Ар╕кр╕бр╕н** р╣Вр╕Фр╕вр╣Бр╕Ыр╕ер╕Зр╣Вр╕Ир╕Чр╕вр╣Мр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕кр╕бр╕Бр╕▓р╕гр╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕кр╕Хр╕гр╕┤р╕З
            - **р╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╕Цр╕▓р╕зр╕г:** р╣Гр╕Кр╣Й `search_relevant_memories` р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕╡р╕вр╕Бр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Ар╕Бр╣Ир╕▓ р╣Бр╕ер╕░ `save_memory_chunk` р╣Ар╕Юр╕╖р╣Ир╕нр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Гр╕лр╕бр╣Ир╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Юр╕┤р╣Ир╕бр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Хр╣Ир╕нр╣Др╕Ы"""),
            ("placeholder", "{chat_history}"),
            ("human", "{input}"),
            ("placeholder", "{agent_scratchpad}"),
        ])

        # р╕кр╕гр╣Йр╕▓р╕З Agent р╕лр╕ер╕▒р╕Б
        agent = create_openai_tools_agent(self.llm, self.tools, self.prompt)

        # --- ЁЯТб р╕Ир╕╕р╕Фр╣Бр╕Бр╣Йр╣Др╕Вр╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н: р╣Ар╕гр╕▓р╕Ир╕░р╕кр╕гр╣Йр╕▓р╕З AgentExecutor р╕Чр╕╡р╣Ир╕Щр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕Фр╕╡р╕вр╕з ---
        # AgentExecutor р╕Щр╕╡р╣Йр╕Ир╕░р╕Цр╕╣р╕Б "р╕лр╣Ир╕нр╕лр╕╕р╣Йр╕б" р╕Фр╣Йр╕зр╕вр╕гр╕░р╕Ър╕Ър╕Др╕зр╕▓р╕бр╕Ир╕│р╣Гр╕Щр╕ар╕▓р╕вр╕лр╕ер╕▒р╕З
        self.agent_executor = AgentExecutor(
            agent=agent,
            tools=self.tools,
            verbose=True,
            handle_parsing_errors=True
        )
